// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rating.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Coolstore {
  public static partial class RatingService
  {
    static readonly string __ServiceName = "coolstore.RatingService";

    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Coolstore.GetRatingsResponse> __Marshaller_coolstore_GetRatingsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Coolstore.GetRatingsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Coolstore.GetRatingByProductIdRequest> __Marshaller_coolstore_GetRatingByProductIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Coolstore.GetRatingByProductIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Coolstore.GetRatingByProductIdResponse> __Marshaller_coolstore_GetRatingByProductIdResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Coolstore.GetRatingByProductIdResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Coolstore.CreateRatingRequest> __Marshaller_coolstore_CreateRatingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Coolstore.CreateRatingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Coolstore.CreateRatingResponse> __Marshaller_coolstore_CreateRatingResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Coolstore.CreateRatingResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Coolstore.UpdateRatingRequest> __Marshaller_coolstore_UpdateRatingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Coolstore.UpdateRatingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Coolstore.UpdateRatingResponse> __Marshaller_coolstore_UpdateRatingResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Coolstore.UpdateRatingResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Coolstore.GetRatingsResponse> __Method_GetRatings = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Coolstore.GetRatingsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRatings",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_coolstore_GetRatingsResponse);

    static readonly grpc::Method<global::Coolstore.GetRatingByProductIdRequest, global::Coolstore.GetRatingByProductIdResponse> __Method_GetRatingByProductId = new grpc::Method<global::Coolstore.GetRatingByProductIdRequest, global::Coolstore.GetRatingByProductIdResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRatingByProductId",
        __Marshaller_coolstore_GetRatingByProductIdRequest,
        __Marshaller_coolstore_GetRatingByProductIdResponse);

    static readonly grpc::Method<global::Coolstore.CreateRatingRequest, global::Coolstore.CreateRatingResponse> __Method_CreateRating = new grpc::Method<global::Coolstore.CreateRatingRequest, global::Coolstore.CreateRatingResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateRating",
        __Marshaller_coolstore_CreateRatingRequest,
        __Marshaller_coolstore_CreateRatingResponse);

    static readonly grpc::Method<global::Coolstore.UpdateRatingRequest, global::Coolstore.UpdateRatingResponse> __Method_UpdateRating = new grpc::Method<global::Coolstore.UpdateRatingRequest, global::Coolstore.UpdateRatingResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateRating",
        __Marshaller_coolstore_UpdateRatingRequest,
        __Marshaller_coolstore_UpdateRatingResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Coolstore.RatingReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of RatingService</summary>
    public abstract partial class RatingServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Coolstore.GetRatingsResponse> GetRatings(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Coolstore.GetRatingByProductIdResponse> GetRatingByProductId(global::Coolstore.GetRatingByProductIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Coolstore.CreateRatingResponse> CreateRating(global::Coolstore.CreateRatingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Coolstore.UpdateRatingResponse> UpdateRating(global::Coolstore.UpdateRatingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for RatingService</summary>
    public partial class RatingServiceClient : grpc::ClientBase<RatingServiceClient>
    {
      /// <summary>Creates a new client for RatingService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RatingServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RatingService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RatingServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RatingServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RatingServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Coolstore.GetRatingsResponse GetRatings(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRatings(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Coolstore.GetRatingsResponse GetRatings(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRatings, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Coolstore.GetRatingsResponse> GetRatingsAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRatingsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Coolstore.GetRatingsResponse> GetRatingsAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRatings, null, options, request);
      }
      public virtual global::Coolstore.GetRatingByProductIdResponse GetRatingByProductId(global::Coolstore.GetRatingByProductIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRatingByProductId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Coolstore.GetRatingByProductIdResponse GetRatingByProductId(global::Coolstore.GetRatingByProductIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRatingByProductId, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Coolstore.GetRatingByProductIdResponse> GetRatingByProductIdAsync(global::Coolstore.GetRatingByProductIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRatingByProductIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Coolstore.GetRatingByProductIdResponse> GetRatingByProductIdAsync(global::Coolstore.GetRatingByProductIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRatingByProductId, null, options, request);
      }
      public virtual global::Coolstore.CreateRatingResponse CreateRating(global::Coolstore.CreateRatingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateRating(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Coolstore.CreateRatingResponse CreateRating(global::Coolstore.CreateRatingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateRating, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Coolstore.CreateRatingResponse> CreateRatingAsync(global::Coolstore.CreateRatingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateRatingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Coolstore.CreateRatingResponse> CreateRatingAsync(global::Coolstore.CreateRatingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateRating, null, options, request);
      }
      public virtual global::Coolstore.UpdateRatingResponse UpdateRating(global::Coolstore.UpdateRatingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateRating(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Coolstore.UpdateRatingResponse UpdateRating(global::Coolstore.UpdateRatingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateRating, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Coolstore.UpdateRatingResponse> UpdateRatingAsync(global::Coolstore.UpdateRatingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateRatingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Coolstore.UpdateRatingResponse> UpdateRatingAsync(global::Coolstore.UpdateRatingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateRating, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override RatingServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RatingServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(RatingServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetRatings, serviceImpl.GetRatings)
          .AddMethod(__Method_GetRatingByProductId, serviceImpl.GetRatingByProductId)
          .AddMethod(__Method_CreateRating, serviceImpl.CreateRating)
          .AddMethod(__Method_UpdateRating, serviceImpl.UpdateRating).Build();
    }

    /// <summary>Register service method implementations with a service binder. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, RatingServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetRatings, serviceImpl.GetRatings);
      serviceBinder.AddMethod(__Method_GetRatingByProductId, serviceImpl.GetRatingByProductId);
      serviceBinder.AddMethod(__Method_CreateRating, serviceImpl.CreateRating);
      serviceBinder.AddMethod(__Method_UpdateRating, serviceImpl.UpdateRating);
    }

  }
}
#endregion
