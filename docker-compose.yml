version: "3"
services:
  idp-service:
    container_name: idp-service
    image: "vndg/cs-idp-service"
    restart: always
    environment:
      - HostSettings__BasePath=/
      - HostSettings__SpaAllowedCorsOrigin=http://localhost:${WEB_PORT}
      - HostSettings__BackOfficeAllowedCorsOrigin=http://localhost:${BACKOFFICE_PORT}
      - Hosts__Externals__CurrentUri=http://localhost:${IDP_SVR_PORT}
    ports:
      - "${IDP_SVR_PORT}:80"
    expose:
      - "${IDP_SVR_PORT}"
    build:
      context: .
      dockerfile: ./src/services/idp/Dockerfile

  web:
    container_name: web
    image: "vndg/cs-spa"
    restart: always
    environment:
      - NODE_ENV=development
      - NODE_WEB_ENV=http://localhost:${WEB_PORT}/
      - NODE_IDP_ENV=http://${HOST_IP}:${IDP_SVR_PORT}/
      - NODE_OPENAPI_ENV=http://${HOST_IP}:${OPENAPIV1_SVR_PORT}
    ports:
      - "${WEB_PORT}:${WEB_PORT}"
    expose:
      - "${WEB_PORT}"
    build:
      context: .
      dockerfile: ./src/web/Dockerfile

  openapiv1:
    container_name: openapiv1
    image: "vndg/cs-open-api-v1"
    restart: always
    environment:
      - BASE_PATH=/oaiv1/
      - GrpcEndPoints__CatalogEndPoint=catalog-service:${CATALOG_SVC_PORT}
      - GrpcEndPoints__CartEndPoint=cart-service:${CART_SVC_PORT}
      - GrpcEndPoints__InventoryEndPoint=inventory-service:${INVENTORY_SVC_PORT}
      - GrpcEndPoints__RatingEndPoint=rating-service:${RATING_SVC_PORT}
      - ApiVersion=2.0
    ports:
      - "${OPENAPIV1_SVR_PORT}:${OPENAPIV1_SVR_PORT}"
    expose:
      - "${OPENAPIV1_SVR_PORT}"
    build:
      context: .
      dockerfile: ./src/services/open-api-v1/Dockerfile

  cart-service:
    container_name: cart-service
    image: "vndg/cs-cart-service"
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - Features__EfCore__MySqlDb__FQDN=mysqldb:${MYSQLDB_PORT}
      - GrpcEndPoints__CatalogEndPoint=catalog-service:${CATALOG_SVC_PORT}
    ports:
      - "${CART_SVC_PORT}:${CART_SVC_PORT}"
    expose:
      - "${CART_SVC_PORT}"
    build:
      context: .
      dockerfile: ./src/services/cart/Dockerfile

  inventory-service:
    container_name: inventory-service
    image: "vndg/cs-inventory-service"
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - Features__EfCore__MySqlDb__FQDN=mysqldb:${MYSQLDB_PORT}
    ports:
      - "${INVENTORY_SVC_PORT}:${INVENTORY_SVC_PORT}"
    expose:
      - "${INVENTORY_SVC_PORT}"
    build:
      context: .
      dockerfile: ./src/services/inventory/Dockerfile

  catalog-service:
    container_name: catalog-service
    image: "vndg/cs-catalog-service"
    restart: always
    environment:
      - NODE_ENV=development
      - MONGO_DB_URI=mongodb://mymongodb/catalog
      - PORT=${CATALOG_SVC_PORT}
    ports:
      - "${CATALOG_SVC_PORT}:${CATALOG_SVC_PORT}"
    expose:
      - "${CATALOG_SVC_PORT}"
    build:
      context: ./
      dockerfile: ./src/services/catalog/Dockerfile

  # rating-service:
  #   container_name: rating-service
  #   image: "vndg/cs-rating-service"
  #   restart: always
  #   environment:
  #     - NODE_ENV=development
  #     - MONGO_DB_URI=mongodb://mymongodb/rating
  #     - PORT=${RATING_SVC_PORT}
  #   ports:
  #     - "${RATING_SVC_PORT}:${RATING_SVC_PORT}"
  #   expose:
  #     - "${RATING_SVC_PORT}"
  #   build:
  #     context: .
  #     dockerfile: ./src/services/rating/Dockerfile

  mymongodb:
    container_name: mymongodb
    image: "vndg/cs-mymongodb"
    restart: always
    expose:
      - "${MONGODB_PORT}"
    ports:
      - "${MONGODB_PORT}:${MONGODB_PORT}"
    build:
      context: .
      dockerfile: ./deploys/dockers/mymongodb/Dockerfile

  mysqldb:
    container_name: mysqldb
    image: "vndg/cs-mysqldb"
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=P@ssw0rd
    expose:
      - "${MYSQLDB_PORT}"
    ports:
      - "${MYSQLDB_PORT}:${MYSQLDB_PORT}"
    build:
      context: .
      dockerfile: ./deploys/dockers/mysqldb/Dockerfile

volumes:
  shareData:
